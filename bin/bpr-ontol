#!/usr/local/bin/swipl -q -g main -t halt -s

:- use_module(bioprolog(ontol)).
:- use_module(bioprolog(bioprolog_util)).
:- use_module(library(lists)).

:- dynamic user_var/2.

main:-
        getopt([atom([id,i],ID),
                atom([name,n],N),
                atom([res,r],Res),
                bool(synonyms,WbpithSynonyms),
                atom([reltype,t],Type,all)],
               ArgL),
        (ArgL=[] -> Cmd=prolog, FileL=ArgL ; ArgL=[Cmd|FileF]),
        (var(Res) -> true ; load_resource(Res)),
        writeln(loading(FileL)),
        load_factfiles(FileL),
        user_command(Cmd),
        halt.

user_command(prolog):- !, prolog.
user_command(dag):-
        !,
        gv(id,ID),
        gv(type,Type),
        gv(with_synonyms,WithSynonyms),
        showdag(ID,Type,[with_synonyms:WithSynonyms]).

writetab(N):-
        (N =< 0
        ->  true
        ;   write(' '),
            N2 is N-1,
            writetab(N2)).

rcode(root,'$'):-!.
rcode(subclass,'I'):-!.
rcode(part_of,'P'):-!.
rcode(develops_from,'D'):-!.
rcode(X,X).

shownode(T,ID,Opts):-
        class(ID,N),
        rcode(T,C),
        write(C/ID/N),
        (member(with_synonyms:1,Opts)
        ->  forall(synonym(ID,_SynType,Syn),
                   format(' synonym: ~w',Syn))
        ;   true),
        nl.
showdag(ID,Type,Opts):-
        setof(IDp,parentRT(ID,IDp),IDpL),
        setof(IDp,(member(IDp,IDpL),noparent(IDp),showdag(root/IDp,Type,[],IDpL,Opts)),_).
showdag(T/ID,Type,P,L,Opts):-
        length(P,I),
        writetab(I),
        shownode(T,ID,Opts),
        findall(IDc/Tc,(parent(IDc,Tc,ID),oktype(Tc,Type),member(IDc,L),showdag(Tc/IDc,Type,[T|P],L,Opts)),_).

oktype(_,all):- !.
oktype(X,X).

dag(ID,P2):-
        class(ID,N),
        showparent(ID,T,P),
        P2=[T/ID|P],
        length(P,I),
        writetab(I),
        writeln(T/ID/N).
showparent(ID,T,P):-
        parent(ID,T,IDp),
        dag(IDp,P).
showparent(ID,root,[]):-
        not(parent(ID,_,_)).

